swagger: "2.0"
info:
  title: "Savood"
  version: "1.0"
  description: "denn nur lebendiges food tut gut"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"


tags:
- name: "users"
  description: "Management of users"
- name: "offerings"
  description: "Management of offered food items"
- name: "messages"
  description: "Operations about users"
- name: "health"
  description: "Operation regarding helath of application"


### PATHS ###
paths:
  /healthcheck:
    get:
      security: []
      operationId: "healthcheckGet"
      tags:
        - "health"
      summary: "Check Server status"
      produces:
        - "application/json"
      responses:
        '200':
          description: Server is healthy
        '501':
          description: Server is unhealthy
          schema:
            $ref: "#/responses/ErrorResponse"
  /feed:
    get:
      operationId: getFeed
      parameters:
        - in: query
          name: location
          required: true
          type: string
        - in: query
          description: Distance in Meters
          name: distance
          required: true
          type: number
      tags:
      - "offerings"
      summary: "Display a feed of nearby offerings"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Offerings'
        '400':
          $ref: '#/responses/InvalidParameterInput'
  /offerings:
    get:
      operationId: getOfferings
      parameters:
        - in: query
          description: Filteres offerings by owned or requested
          name: filter
          required: false
          type: string
          enum:
            - owned
            - requested
      tags:
      - "offerings"
      summary: "Display a feed of nearby offerings"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Offerings'
        '400':
          $ref: '#/responses/InvalidParameterInput'
    post:
      operationId: createNewOffering
      tags:
      - "offerings"
      summary: "Add a new offering"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Offering that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Offering"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Offering'
        '400':
          $ref: '#/responses/InvalidParameterInput'
  /offerings/{id}:
    parameters:
      - in: path
        required: true
        name: id
        type: string
    get:
      operationId: getOfferingById
      tags:
      - "offerings"
      summary: "Display an offering"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Offering'
        '400':
          $ref: '#/responses/InvalidParameterInput'
    patch:
      operationId: updateOfferingById
      tags:
      - "offerings"
      summary: "Update an offering"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New parameters of the offering"
        required: true
        schema:
          $ref: "#/definitions/Offering"
      responses:
        '204':
          description: Accepted; No response.
        '400':
          $ref: '#/responses/InvalidParameterInput'
    delete:
      operationId: deleteOfferingById
      tags:
      - "offerings"
      summary: "Delete an offering"
      produces:
      - "application/json"
      responses:
        '204':
          description: Removed; No response.
        '400':
          $ref: '#/responses/InvalidParameterInput'
  /offerings/{id}/chats:
    parameters:
      - in: path
        required: true
        name: id
        type: string
    get:
      operationId: getAllChatsForOffering
      tags:
        - "offerings"
        - "messages"
      summary: "Display a user"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Chats'
        '400':
          $ref: '#/responses/InvalidParameterInput'
  /users:
    post:
      operationId: createNewUser
      tags:
      - "users"
      summary: "Add a new user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/InvalidParameterInput'
  /users/{id}:
    parameters:
      - in: path
        required: true
        name: id
        type: string
    get:
      operationId: getUserById
      tags:
      - "users"
      summary: "Display a user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/InvalidParameterInput'
    patch:
      operationId: updateUserById
      tags:
      - "users"
      summary: "Update a user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New parameters of the User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        '204':
          description: Accepted; No response.
        '400':
          $ref: '#/responses/InvalidParameterInput'
    delete:
      operationId: deleteUserById
      tags:
      - "users"
      summary: "Delete a users"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        '204':
          description: Removed; No response.
        '400':
          $ref: '#/responses/InvalidParameterInput'

  /chats/:
    get:
      operationId: getAllChats
      tags:
      - "messages"
      summary: "Get all Chats"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Chats'
        '400':
          $ref: '#/responses/InvalidParameterInput'

  /chats/{chatID}/messages:
    parameters:
      - in: path
        required: true
        name: chatID
        type: string
    get:
      operationId: getAllMessagesForChat
      tags:
      - "messages"
      summary: "Add a new message"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Messages'
        '400':
          $ref: '#/responses/InvalidParameterInput'
    post:
      operationId: createNewMessage
      tags:
      - "messages"
      summary: "Add a new message"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Message that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Message"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Message'
        '400':
          $ref: '#/responses/InvalidParameterInput'
  /chats/{chatID}/messages/{id}:
    parameters:
      - in: path
        required: true
        name: chatID
        type: string
      - in: path
        required: true
        name: id
        type: string
    get:
      operationId: getMessageById
      tags:
      - "messages"
      summary: "Display a message"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        '200':
          description: Object found and returned
          schema:
            $ref: '#/definitions/Message'
        '400':
          $ref: '#/responses/InvalidParameterInput'
    patch:
      operationId: updateMessageById
      tags:
      - "messages"
      summary: "Update a message"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New parameters of the message"
        required: true
        schema:
          $ref: "#/definitions/Message"
      responses:
        '204':
          description: Accepted; No response.
        '400':
          $ref: '#/responses/InvalidParameterInput'
    delete:
      operationId: deleteMessageById
      tags:
      - "messages"
      summary: "Delete a message"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        '204':
          description: Removed; No response.
        '400':
          $ref: '#/responses/InvalidParameterInput'

    

securityDefinitions:
  bearer:
    type: apiKey
    name: Authorization
    in: header
    
security:
  - bearer: []

### RESPONSES ###
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/ErrorModel"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/ErrorModel"
  ErrorResponse:
    description: "Generic Error"
    schema:
      $ref: "#/definitions/ErrorModel"
  InvalidParameterInput:
    description: Invalid parameter input was passed
    schema:
      $ref: "#/definitions/InvalidParameterInput"

### DEFINITIONS ###
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
        format: "email"
      phone:
        type: "string"
        format: "phone"
      address:
        type: "object"
        properties:
          street:
            type: "string"
          number:
            type: "string"
          zip:
            type: "integer"
            format: "int64"
          city:
            type: "string"
      avatar-id:
        type: "string"
      background-id:
        type: "string"
      description:
        type: "string"
      badges:
        type: "array"
        items:
          type: "string"
    xml:
      name: "user"
    example:
      id: "5"
      firstname: Marty
      lastname: McFlfy
      email: apiteam@swagger.io
      phone: 202-555-0191
      address:
          street: Musterstraße
          number: 1337
          zip: 42069
          city: Musterstadt
      avatar-id: ''
      background-id: ''
      description: I save the wrap and the world
      badges: [true,false,true,true,true,false,false,true,false]
  Message:
    type: "object"
    properties:
      from:
        type: "object"
        properties:
          user-id:
            type: "string"
          firstname:
            type: "string"
          lastname:
            type: "string"
          avatar-id:
            type: "string"
      content:
        type: "string"
      time:
        type: "string"
        format: "date-time"
    xml:
      name: "Message"
  Messages:
    type: "array"
    items:
      $ref: '#/definitions/Message'
  Chat:
    type: "object"
    properties:
      id:
        type: "string"
      partner:
        type: "object"
        properties:
          user-id:
            type: "string"
          firstname:
            type: "string"
          lastname:
            type: "string"
          avatar-id:
            type: "string"
      offering-id:
        type: "array"
        items:
          type: "string"
  Chats:
    type: "array"
    items:
      $ref: '#/definitions/Chat'
  Offering:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      header:
        type: "string"
      creator-id:
        type: "integer"
        format: "int64"
      best-by-date:
        type: "string"
        format: "date"
      location:
        type: "string"
      avatar-url:
        type: "string"
      requested-by:
        type: "integer"
        format: "int64"
      savooders:
        type: "array"
        items:
          type: "string"
      time:
        type: "string"
        format: "date-time"
    xml:
      name: "Offering"
  Offerings:
    type: "array"
    items:
      $ref: '#/definitions/Offering'
    xml:
      name: "Feed"
  Principal:
    type: object
    properties:
      email:
        type: string
      userid:
        type: string
      username:
        type: string
  ErrorModel:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  InvalidParameterInput:
    type: object
    properties:
      attribute:
        type: string
      message:
        type: string
    required:
      - attribute
      - message

### UNCOMMENT THIS for codegen      
#basePath: /v2/
#schemes:
# - http



### UNCOMMENT THIS for swaggerhub
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /TimMaa/Savood/1.0
schemes:
 - https
 - http
